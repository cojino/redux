{"ast":null,"code":"import { Task } from \"./module/task\";\nconst initialState = [new Task(1, \"task 1\"), new Task(2, \"task 2\"), new Task(3, \"task 3\")];\nconst TYPE_TODO_ADD = \"todo/add\";\n\nconst TodoReducer = (action = {}, prevState = initialState) => {\n  switch (action.type) {\n    case TYPE_TODO_ADD:\n      return [...prevState, new Task(prevState.length + 1, action.payload.titleTask)];\n\n    default:\n      return prevState;\n  }\n};\n\n_c = TodoReducer;\nlet newState1 = TodoReducer({\n  type: TYPE_TODO_ADD,\n  payload: {\n    titleTask: \"task 4\"\n  }\n});\nconsole.log(newState1);\nlet newState2 = TodoReducer(newState1, {\n  type: TYPE_TODO_ADD,\n  payload: {\n    titleTask: \"task 5\"\n  }\n});\nconsole.log(newState2);\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoReducer\");","map":{"version":3,"sources":["/home/wolfy/work/TRAINING/work/src/index.js"],"names":["Task","initialState","TYPE_TODO_ADD","TodoReducer","action","prevState","type","length","payload","titleTask","newState1","console","log","newState2"],"mappings":"AAAA,SAASA,IAAT,QAAqB,eAArB;AAEA,MAAMC,YAAY,GAAG,CACnB,IAAID,IAAJ,CAAS,CAAT,EAAY,QAAZ,CADmB,EAEnB,IAAIA,IAAJ,CAAS,CAAT,EAAY,QAAZ,CAFmB,EAGnB,IAAIA,IAAJ,CAAS,CAAT,EAAY,QAAZ,CAHmB,CAArB;AAMA,MAAME,aAAa,GAAG,UAAtB;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAM,GAAG,EAAV,EAAcC,SAAS,GAAGJ,YAA1B,KAA2C;AAC7D,UAAQG,MAAM,CAACE,IAAf;AACE,SAAKJ,aAAL;AACE,aAAO,CACL,GAAGG,SADE,EAEL,IAAIL,IAAJ,CAASK,SAAS,CAACE,MAAV,GAAmB,CAA5B,EAA+BH,MAAM,CAACI,OAAP,CAAeC,SAA9C,CAFK,CAAP;;AAIF;AACE,aAAOJ,SAAP;AAPJ;AASD,CAVD;;KAAMF,W;AAYN,IAAIO,SAAS,GAAGP,WAAW,CAAC;AAC1BG,EAAAA,IAAI,EAAEJ,aADoB;AAE1BM,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFiB,CAAD,CAA3B;AAIAE,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEA,IAAIG,SAAS,GAAGV,WAAW,CAACO,SAAD,EAAY;AACrCJ,EAAAA,IAAI,EAAEJ,aAD+B;AAErCM,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAF4B,CAAZ,CAA3B;AAIAE,OAAO,CAACC,GAAR,CAAYC,SAAZ","sourcesContent":["import { Task } from \"./module/task\";\n\nconst initialState = [\n  new Task(1, \"task 1\"),\n  new Task(2, \"task 2\"),\n  new Task(3, \"task 3\"),\n];\n\nconst TYPE_TODO_ADD = \"todo/add\";\n\nconst TodoReducer = (action = {}, prevState = initialState) => {\n  switch (action.type) {\n    case TYPE_TODO_ADD:\n      return [\n        ...prevState,\n        new Task(prevState.length + 1, action.payload.titleTask),\n      ];\n    default:\n      return prevState;\n  }\n};\n\nlet newState1 = TodoReducer({\n  type: TYPE_TODO_ADD,\n  payload: { titleTask: \"task 4\" },\n});\nconsole.log(newState1);\n\nlet newState2 = TodoReducer(newState1, {\n  type: TYPE_TODO_ADD,\n  payload: { titleTask: \"task 5\" },\n});\nconsole.log(newState2);\n"]},"metadata":{},"sourceType":"module"}