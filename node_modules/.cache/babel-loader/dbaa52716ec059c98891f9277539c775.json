{"ast":null,"code":"import { Task } from \"./module/task\";\nimport { createStore } from \"redux\";\nconst initialState = [new Task(1, \"task 1\"), new Task(2, \"task 2\"), new Task(3, \"task 3\")];\nconst TYPE_TODO_ADD = \"todo/add\";\n\nconst TodoReducer = (prevState = initialState, action = {}) => {\n  switch (action.type) {\n    case TYPE_TODO_ADD:\n      return [...prevState, new Task(prevState.length + 1, action.payload.titleTask)];\n\n    default:\n      return prevState;\n  }\n};\n\n_c = TodoReducer;\nconst store = createStore(TodoReducer);\nstore.dispatch({\n  type: TYPE_TODO_ADD,\n  payload: {\n    titleTask: \"task 4\"\n  }\n});\nconsole.log(store.getState());\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoReducer\");","map":{"version":3,"sources":["/home/wolfy/work/TRAINING/work/src/index.js"],"names":["Task","createStore","initialState","TYPE_TODO_ADD","TodoReducer","prevState","action","type","length","payload","titleTask","store","dispatch","console","log","getState"],"mappings":"AAAA,SAASA,IAAT,QAAqB,eAArB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG,CACnB,IAAIF,IAAJ,CAAS,CAAT,EAAY,QAAZ,CADmB,EAEnB,IAAIA,IAAJ,CAAS,CAAT,EAAY,QAAZ,CAFmB,EAGnB,IAAIA,IAAJ,CAAS,CAAT,EAAY,QAAZ,CAHmB,CAArB;AAMA,MAAMG,aAAa,GAAG,UAAtB;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAS,GAAGH,YAAb,EAA2BI,MAAM,GAAG,EAApC,KAA2C;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,aAAL;AACE,aAAO,CACL,GAAGE,SADE,EAEL,IAAIL,IAAJ,CAASK,SAAS,CAACG,MAAV,GAAmB,CAA5B,EAA+BF,MAAM,CAACG,OAAP,CAAeC,SAA9C,CAFK,CAAP;;AAIF;AACE,aAAOL,SAAP;AAPJ;AASD,CAVD;;KAAMD,W;AAYN,MAAMO,KAAK,GAAGV,WAAW,CAACG,WAAD,CAAzB;AAEAO,KAAK,CAACC,QAAN,CAAe;AACbL,EAAAA,IAAI,EAAEJ,aADO;AAEbM,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFI,CAAf;AAKAG,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ","sourcesContent":["import { Task } from \"./module/task\";\nimport { createStore } from \"redux\";\n\nconst initialState = [\n  new Task(1, \"task 1\"),\n  new Task(2, \"task 2\"),\n  new Task(3, \"task 3\"),\n];\n\nconst TYPE_TODO_ADD = \"todo/add\";\n\nconst TodoReducer = (prevState = initialState, action = {}) => {\n  switch (action.type) {\n    case TYPE_TODO_ADD:\n      return [\n        ...prevState,\n        new Task(prevState.length + 1, action.payload.titleTask),\n      ];\n    default:\n      return prevState;\n  }\n};\n\nconst store = createStore(TodoReducer);\n\nstore.dispatch({\n  type: TYPE_TODO_ADD,\n  payload: { titleTask: \"task 4\" },\n});\n\nconsole.log(store.getState());\n"]},"metadata":{},"sourceType":"module"}